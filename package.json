{
  "name": "commentary",
  "displayName": "Commentary",
  "description": "Inline comments for rendered Markdown in VS Code. Select, annotate, review, and send to your AI agent, without touching the source file.",
  "version": "0.9.0",
  "publisher": "hughesjared",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/jaredhughes/commentary"
  },
  "bugs": {
    "url": "https://github.com/jaredhughes/commentary/issues"
  },
  "homepage": "https://github.com/jaredhughes/commentary#readme",
  "engines": {
    "vscode": "^1.85.0"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "markdown",
    "comments",
    "annotations",
    "review",
    "ai"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "commentary.openPreview",
        "title": "Open with Commentary",
        "category": "Commentary",
        "icon": "$(comment)"
      },
      {
        "command": "commentary.saveComment",
        "title": "Save Comment",
        "category": "Commentary"
      },
      {
        "command": "commentary.deleteComment",
        "title": "Delete Comment",
        "category": "Commentary",
        "icon": "$(trash)"
      },
      {
        "command": "commentary.deleteAllComments",
        "title": "Delete All",
        "category": "Commentary",
        "icon": "$(trash)"
      },
      {
        "command": "commentary.sendToAgent",
        "title": "Send to Agent",
        "category": "Commentary",
        "icon": "$(send)"
      },
      {
        "command": "commentary.sendToAgentClaude",
        "title": "Send to Agent",
        "category": "Commentary",
        "icon": "$(send)"
      },
      {
        "command": "commentary.sendToAgentCursor",
        "title": "Copy for Agent",
        "category": "Commentary",
        "icon": "$(copy)"
      },
      {
        "command": "commentary.sendAllToAgent",
        "title": "Send all to agent",
        "category": "Commentary",
        "icon": "$(send)"
      },
      {
        "command": "commentary.sendAllToAgentClaude",
        "title": "Send all to agent",
        "category": "Commentary",
        "icon": "$(send)"
      },
      {
        "command": "commentary.sendAllToAgentCursor",
        "title": "Copy all for agent",
        "category": "Commentary",
        "icon": "$(copy)"
      },
      {
        "command": "commentary.exportComments",
        "title": "Export",
        "category": "Commentary",
        "icon": "$(export)"
      },
      {
        "command": "commentary.importComments",
        "title": "Import",
        "category": "Commentary",
        "icon": "$(go-to-file)"
      },
      {
        "command": "commentary.refreshComments",
        "title": "Refresh",
        "category": "Commentary",
        "icon": "$(refresh)"
      },
      {
        "command": "commentary.showCommentsSidebar",
        "title": "Show Comments Sidebar",
        "category": "Commentary"
      },
      {
        "command": "commentary.configureAgent",
        "title": "Configure Agent...",
        "category": "Commentary",
        "icon": "$(settings-gear)"
      },
      {
        "command": "commentary.toggleAgentProvider",
        "title": "Configure Agent...",
        "category": "Commentary",
        "icon": "$(gear)"
      },
      {
        "command": "commentary.editComment",
        "title": "Edit Comment",
        "category": "Commentary",
        "icon": "$(edit)"
      },
      {
        "command": "commentary.editCommentFromSidebar",
        "title": "Edit Comment from Sidebar",
        "category": "Commentary"
      },
      {
        "command": "commentary.openDocument",
        "title": "Open Document",
        "category": "Commentary"
      },
      {
        "command": "commentary.addDocumentComment",
        "title": "Add Document-Level Comment",
        "category": "Commentary",
        "icon": "$(note)"
      },
      {
        "command": "commentary.listAvailableCommands",
        "title": "Debug: List Available Commands",
        "category": "Commentary"
      },
      {
        "command": "commentary.selectTheme",
        "title": "Select theme...",
        "category": "Commentary",
        "icon": "$(color-mode)"
      }
    ],
    "customEditors": [
      {
        "viewType": "commentary.markdownEditor",
        "displayName": "Commentary Markdown Editor",
        "selector": [
          {
            "filenamePattern": "*.md"
          }
        ],
        "priority": "default"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "commentary-sidebar",
          "title": "Commentary",
          "icon": "$(comment)"
        }
      ]
    },
    "views": {
      "commentary-sidebar": [
        {
          "id": "commentary.commentsView",
          "name": "Commentary"
        }
      ]
    },
    "keybindings": [
      {
        "command": "commentary.showCommentsSidebar",
        "key": "shift+cmd+c",
        "mac": "shift+cmd+c",
        "win": "shift+ctrl+c",
        "linux": "shift+ctrl+c"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "commentary.openPreview",
          "when": "true"
        },
        {
          "command": "commentary.sendAllToAgent",
          "when": "true"
        },
        {
          "command": "commentary.showCommentsSidebar",
          "when": "true"
        },
        {
          "command": "commentary.deleteAllComments",
          "when": "true"
        },
        {
          "command": "commentary.toggleAgentProvider",
          "when": "true"
        },
        {
          "command": "commentary.addDocumentComment",
          "when": "true"
        },
        {
          "command": "commentary.selectTheme",
          "when": "true"
        },
        {
          "command": "commentary.saveComment",
          "when": "false"
        },
        {
          "command": "commentary.deleteComment",
          "when": "false"
        },
        {
          "command": "commentary.editComment",
          "when": "false"
        },
        {
          "command": "commentary.sendToAgent",
          "when": "false"
        },
        {
          "command": "commentary.exportComments",
          "when": "false"
        },
        {
          "command": "commentary.importComments",
          "when": "false"
        },
        {
          "command": "commentary.refreshComments",
          "when": "false"
        },
        {
          "command": "commentary.editCommentFromSidebar",
          "when": "false"
        },
        {
          "command": "commentary.openDocument",
          "when": "false"
        }
      ],
      "explorer/context": [
        {
          "command": "commentary.openPreview",
          "when": "resourceExtname == .md",
          "group": "navigation@1"
        }
      ],
      "editor/title": [
        {
          "command": "commentary.openPreview",
          "when": "editorLangId == markdown",
          "group": "navigation"
        }
      ],
      "view/title": [
        {
          "command": "commentary.sendAllToAgentClaude",
          "when": "view == commentary.commentsView && commentary.hasComments && commentary.agentProvider == claude",
          "group": "navigation@1"
        },
        {
          "command": "commentary.sendAllToAgentCursor",
          "when": "view == commentary.commentsView && commentary.hasComments && commentary.agentProvider == cursor",
          "group": "navigation@1"
        },
        {
          "command": "commentary.deleteAllComments",
          "when": "view == commentary.commentsView && commentary.hasComments",
          "group": "navigation@2"
        }
      ],
      "view/item/context": [
        {
          "command": "commentary.sendToAgentClaude",
          "when": "view == commentary.commentsView && (viewItem == comment || viewItem == documentComment) && commentary.agentProvider == claude",
          "group": "inline@1"
        },
        {
          "command": "commentary.sendToAgentCursor",
          "when": "view == commentary.commentsView && (viewItem == comment || viewItem == documentComment) && commentary.agentProvider == cursor",
          "group": "inline@1"
        },
        {
          "command": "commentary.deleteComment",
          "when": "view == commentary.commentsView && (viewItem == comment || viewItem == documentComment)",
          "group": "inline@2"
        }
      ]
    },
    "configuration": {
      "title": "Commentary",
      "properties": {
        "commentary.theme.name": {
          "type": "string",
          "default": "github-light",
          "enum": [
            "github-light",
            "github-dark",
            "water-light",
            "water-dark",
            "sakura-light",
            "sakura-dark",
            "sakura-vader",
            "sakura-pink",
            "sakura-earthly",
            "pico-amber",
            "pico-blue",
            "pico-cyan",
            "pico-green",
            "pico-grey",
            "pico-pink",
            "pico-purple",
            "pico-red",
            "simple",
            "matcha",
            "latex",
            "tufte",
            "new"
          ],
          "description": "Built-in theme for the Markdown preview"
        },
        "commentary.theme.customCssPath": {
          "type": "string",
          "default": "",
          "description": "Path to a custom CSS file (absolute or workspace-relative)"
        },
        "commentary.theme.useCustomFirst": {
          "type": "boolean",
          "default": false,
          "description": "If true and custom CSS path is set, load custom CSS before built-in theme"
        },
        "commentary.storage.mode": {
          "type": "string",
          "default": "workspace",
          "enum": [
            "workspace",
            "sidecar"
          ],
          "enumDescriptions": [
            "Store comments in VS Code workspace storage (not tracked by git)",
            "Store comments in .comments/ folder as JSON files (shareable)"
          ],
          "description": "Storage mode for comments"
        },
        "commentary.agent.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable AI agent integration"
        },
        "commentary.agent.provider": {
          "type": "string",
          "default": "cursor",
          "enum": [
            "claude",
            "cursor",
            "openai",
            "custom"
          ],
          "description": "AI agent provider"
        },
        "commentary.agent.apiKey": {
          "type": "string",
          "default": "",
          "description": "API key for the AI agent (leave empty to use environment variable)"
        },
        "commentary.agent.endpoint": {
          "type": "string",
          "default": "",
          "description": "Custom endpoint URL for AI agent (only used when provider is 'custom')"
        },
        "commentary.agent.model": {
          "type": "string",
          "default": "claude-3-5-sonnet-20241022",
          "description": "Model to use for AI agent"
        },
        "commentary.agent.contextLines": {
          "type": "number",
          "default": 6,
          "description": "Number of lines before and after selection to include as context"
        },
        "commentary.agent.cursorCliPath": {
          "type": "string",
          "default": "cursor-agent",
          "description": "Path to cursor-agent CLI executable (only used when provider is 'cursor')"
        },
        "commentary.agent.cursorInteractive": {
          "type": "boolean",
          "default": true,
          "description": "Use interactive mode for Cursor CLI (only used when provider is 'cursor')"
        },
        "commentary.agent.claudeCommand": {
          "type": "string",
          "default": "claude",
          "description": "Command to invoke Claude Code in terminal (e.g. 'claude', 'claude-code', or full path)"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "copy-themes": "node scripts/copy-themes.js",
    "compile": "npm run copy-themes && tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts --max-warnings 100",
    "test": "node ./out/test/runTest.js",
    "prepare": "husky"
  },
  "devDependencies": {
    "@exampledev/new.css": "^1.1.3",
    "@lowlighter/matcha": "^3.0.1",
    "@picocss/pico": "^2.1.1",
    "@types/mocha": "^10.0.6",
    "@types/node": "^20.x",
    "@types/vscode": "^1.85.0",
    "@typescript-eslint/eslint-plugin": "^6.x",
    "@typescript-eslint/parser": "^6.x",
    "@vscode/test-electron": "^2.3.8",
    "eslint": "^8.x",
    "github-markdown-css": "^5.8.1",
    "glob": "^10.3.10",
    "husky": "^9.1.7",
    "latex.css": "^1.13.0",
    "mocha": "^10.2.0",
    "mvp.css": "^1.17.2",
    "sakura.css": "^1.5.1",
    "simpledotcss": "^2.3.7",
    "tufte-css": "^1.8.0",
    "typescript": "^5.3.0",
    "water.css": "^2.1.1"
  },
  "dependencies": {
    "@anthropic-ai/sdk": "^0.67.0",
    "@types/markdown-it": "^14.1.2",
    "highlight.js": "^11.11.1",
    "markdown-it": "^14.1.0",
    "markdown-it-anchor": "^9.2.0",
    "markdown-it-github-headings": "^2.0.1",
    "markdown-it-task-lists": "^2.1.1"
  }
}
